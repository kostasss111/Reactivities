{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/Activities/Dashboard/ActivityListItemAttendee.tsx","features/Activities/Dashboard/ActivityListItem.tsx","features/Activities/Dashboard/ActivityList.tsx","features/Activities/Dashboard/ActivityFilters.tsx","features/Activities/Dashboard/ActivityListItemPlaceholder.tsx","features/Activities/Dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/layout/LoadingComponent.tsx","features/Activities/Form/MyTextArea.tsx","features/Activities/Form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/Activities/Form/ActivityForm.tsx","features/Activities/Details/ActivityDetailedChat.tsx","features/Activities/Details/ActivityDeatailedInfo.tsx","features/Activities/Details/ActivityDetailedHeader.tsx","features/Activities/Details/ActivityDetailedSidebar.tsx","features/Activities/Details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","currentUserProfile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","relaxed","divided","Extra","Math","floor","random","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","floatted","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.b2619481.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if(pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch(status) {\r\n        case 400: \r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors) {\r\n                    if(data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401: \r\n            toast.error('unautorised');\r\n            break;\r\n        case 404: \r\n            //toast.error('not found');\r\n            history.push('/not-found');\r\n            break;\r\n        case 500: \r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody), \r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody), \r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody), \r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) =>  requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n};\r\n\r\nconst agent = {\r\n    Activities, \r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if(activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}   ","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    //activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    // constructor() {\r\n    //     makeObservable(this, {\r\n    //         title: observable,\r\n    //         //setTitle: action.bound //if action.bound then they are automaticly binds all methods with ()\r\n    //         setTitle: action //if we use simply action, in methods setTitle we need to set setTtile = () => {}\r\n    //     })\r\n    // }\r\n    //also can make constructor autoObservable\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value:string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate': \r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async(id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity) {\r\n            runInAction(() => {\r\n                this.selectedActivity = activity;\r\n            });\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch(error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user) {\r\n            activity.isGoing = activity.attendees!\r\n            .some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees!.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                //this.activities = [...this.activities.filter(a => a.id !== id)];\r\n                this.activityRegistry.delete(id)\r\n                this.loading = false;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    } \r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    currentUserProfile: Profile | null = null;\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab: number = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                }\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile &&\r\n                    this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        // two !! means what we validate have user object or not\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() =>  this.user = user );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() =>  this.user = user );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                });\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            });\r\n        }\r\n        if(this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'});\r\n        }\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this); \r\n        \r\n        //this calling only when something was changed in this.token\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token : string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    });\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment' , (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\" >\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)} />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees} : Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached=\"top\" color=\"red\" content=\"Cancelled\" style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\"/>{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name=\"marker\" />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    floated=\"right\"\r\n                    content=\"View\"\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n        {groupedActivities.map(([group, activities]) => (\r\n            <Fragment key={group}>\r\n                <Header sub color=\"teal\">\r\n                    {group}\r\n                </Header>\r\n                {activities.map(activity => (\r\n                    <ActivityListItem key={activity.id} activity={activity}/>\r\n                ))}                \r\n            </Fragment>\r\n        ))}\r\n        </>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer( function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{width: '100%', marginTop: 30}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')} />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}/>\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate' || new Date())}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n                \r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                        <Label style={{marginBottom: 10}} basic color=\"red\" content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return(\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer( function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '',email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                    loading={isSubmitting} \r\n                    positive \r\n                    content='Register'\r\n                    type='submit' \r\n                    fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Divider, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer( function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                        <Button as={Link} to='/activities' size=\"huge\" inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) :(\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size=\"huge\" inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size=\"huge\" inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size=\"huge\"\r\n                            inverted\r\n                            color=\"facebook\"\r\n                            content=\"Login with Facebook\"\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                </>\r\n                )}\r\n                \r\n                \r\n            </Container>\r\n\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean,\r\n    content?: string\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?:string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n                />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n];","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n             />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"./MyTextArea\";\r\nimport MySelectInput from \"./MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {loadActivity, loadingInitial, createActivity, updateActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const[activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()        \r\n    });\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n        }\r\n    }, [id, loadActivity]);    \r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading activity...'/>;\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub  color='teal'/>\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat='MMM d, yyyy h:mm aa' />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated=\"right\" \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated=\"right\" type='button' content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport formatDistanceToNow from 'date-fns/esm/formatDistanceToNow'\r\n\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({activityId} : Props) {\r\n\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                        onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{body: ''}}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form' >\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea \r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if(e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n\r\n                                                if(e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`} >{comment.username}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                                        \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading , cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absoulte', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy ')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'} \r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity' }\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                            />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                    \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react';\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}} : Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={`${Math.floor(Math.random()*1000)}${attendee.username}`}>\r\n                            {attendee.username === host?.username && \r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedInfo from \"./ActivityDeatailedInfo\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            loadActivity(id);\r\n            return () => clearSelectedActivity();\r\n        }\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) \r\n        return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" /> \r\n                Oops - we've looked everywhere and could not find this. \r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/activities\" primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color=\"red\" content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stactrace' color=\"teal\"/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>        \r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport MyTextArea from \"../Activities/Form/MyTextArea\";\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const { loadUserActivities, profile,loadingActivities, userActivities } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, \r\n                                        objectFit: 'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 4 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following` } />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    };\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles } >\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if(cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content='Step 2 - Resize Image'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className=\"img-preview\" style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }   \r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floatted='right' \r\n                            basic \r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'} \r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) :(\r\n                        <Card.Group itemsPerRow={5} >\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic \r\n                                                color='green' \r\n                                                content='Main' \r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button  \r\n                                                basic \r\n                                                color=\"red\"\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>            \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile} : Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\" >\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if(loadingProfile) return <LoadingComponent content=\"Loading profile...\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const { userStore: {isLoggedIn} } = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/Activities/Dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/homePage';\nimport ActivityForm from '../../features/Activities/Form/ActivityForm';\nimport ActivityDetails from '../../features/Activities/Details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() { \n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  //useEffect uses when component is loading (on all refresh click etc);\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore]);\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    // <> equals - <Fragment>\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>     \n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>   \n            </Container>\n          </>\n        )}\n      />\n      \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}